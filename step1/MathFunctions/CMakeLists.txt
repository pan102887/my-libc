file(GLOB MATH_FUNCTIONS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/MathFunctions.cpp ${CMAKE_CURRENT_SOURCE_DIR}/MathFunctions.h)
set(MATH_FUNCTIONS_LIB_NAME "MathFunctions")
if (BUILD_DYNAMIC_LIB)
    add_library(${MATH_FUNCTIONS_LIB_NAME} SHARED ${MATH_FUNCTIONS_SOURCES})
    if (CMAKE_SYSTEM_NAME MATCHES "Windows")
        target_compile_definitions(${MATH_FUNCTIONS_LIB_NAME} PRIVATE USE_DLL)
        target_compile_definitions(${MATH_FUNCTIONS_LIB_NAME} PRIVATE EXPORT_DLL)
        set_target_properties(${MATH_FUNCTIONS_LIB_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    endif()
else()
    add_library(${MATH_FUNCTIONS_LIB_NAME} STATIC ${MATH_FUNCTIONS_SOURCES})
endif()

if(USE_MYMATH)
target_compile_definitions(${MATH_FUNCTIONS_LIB_NAME} PRIVATE USE_MYMATH)
endif()


set(MY_SQRT_LIB_NAME "my_sqrt_lib")
file(GLOB MY_SQRT_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/my_sqrt.cpp ${CMAKE_CURRENT_SOURCE_DIR}/my_sqrt.h)
if (BUILD_DYNAMIC_LIB)
    add_library(${MY_SQRT_LIB_NAME} SHARED ${MY_SQRT_SOURCES})
    if (CMAKE_SYSTEM_NAME MATCHES "Windows")
        target_compile_definitions(${MY_SQRT_LIB_NAME} PRIVATE USE_DLL)
        target_compile_definitions(${MY_SQRT_LIB_NAME} PRIVATE EXPORT_DLL)
        set_target_properties(${MY_SQRT_LIB_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    endif()
else()
    add_library(${MY_SQRT_LIB_NAME} STATIC ${MY_SQRT_SOURCES})
endif()

target_link_libraries(${MATH_FUNCTIONS_LIB_NAME} PRIVATE ${MY_SQRT_LIB_NAME})
target_include_directories(${MATH_FUNCTIONS_LIB_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
